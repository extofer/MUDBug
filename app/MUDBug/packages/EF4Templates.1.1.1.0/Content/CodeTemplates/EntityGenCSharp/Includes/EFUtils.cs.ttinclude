<#+
// <copyright file="EFUtils.tt" company="CompDJ">
//  Copyright © 2010 CompDJ. All Rights Reserved.
// </copyright>

public sealed class EfUtils
{
	private EfUtils() {
	}
	
	/// <summary>
	/// Adds the code coverage and contract exclusion attributes
	/// </summary>
	/// <returns></returns>
	public static string ReturnExcludeFromCodeCoverageString() {
		if (EntityGenerator.ExcludeFromCodeCoverage) 
			{ return "[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]" + System.Environment.NewLine + 
					"[System.Diagnostics.Contracts.ContractVerification(false)]" + System.Environment.NewLine; }
		return string.Empty;
	}
	
	public static bool IsUpperCase(string inputString){
		return System.Text.RegularExpressions.Regex.IsMatch(inputString, "^[A-Z]+$");
	}

	/// <summary>
	/// Reformats the passed string from camelCase to Proper Case
	/// </summary>
	/// <param name="sIn">The string to reformat to proper case</param>
	/// <returns></returns>
	public static string ParseCamelToProper(string sIn)
	{
		if (EfUtils.IsUpperCase(sIn)) {
			return sIn;
		}

		if (string.IsNullOrEmpty(sIn))
			return "";

		char[] letters = sIn.ToCharArray();
		System.Text.StringBuilder sOut = new System.Text.StringBuilder();
		int index = 0;
		if (sIn.Contains("ID")) {
			sOut.Append(letters[0]);
			sOut.Append(sIn.Substring(1, (sIn.Length - 1)));
		} else {
			foreach (char c in letters) {
				if ((index == 0)) {
					sOut.Append(" ");
					sOut.Append(c.ToString().ToUpper());
				} else if (char.IsUpper(c)) {
					sOut.Append(" ");
					sOut.Append(c);
				} else {
					sOut.Append(c);
				}
				index += 1;
			}
		}
		return System.Text.RegularExpressions.Regex.Replace(sOut.ToString().Trim(), "(?<=[A-Z]) (?=[A-Z])", string.Empty);
	}

	public static string WriteModelHeader(params string[] extraUsings)
	{
		System.Text.StringBuilder sb = new System.Text.StringBuilder();

		sb.AppendLine(WriteContextHeader(extraUsings));
		sb.AppendLine("");
		sb.AppendLine("using System;");
		sb.AppendLine("using System.Collections.Generic;");
		sb.AppendLine("using System.Collections.ObjectModel;");
		sb.AppendLine("using System.Collections.Specialized;");
		sb.AppendLine("using System.ComponentModel;");
		sb.AppendLine("using System.Globalization;");
		sb.AppendLine("using System.Runtime.Serialization;");
		sb.AppendLine("using System.Runtime.CompilerServices;");

		string extraNS = string.Join(string.Empty, extraUsings.Select((System.Object u) => "using " + u + ";" + Environment.NewLine).ToArray());
		if (!string.IsNullOrEmpty(extraNS))
			sb.AppendLine(extraNS);

		return sb.ToString();
	}

	public static string WriteContextHeader(params string[] extraUsings)
	{
		System.Text.StringBuilder sb = new System.Text.StringBuilder();

		sb.AppendLine("//------------------------------------------------------------------------------");
		sb.AppendLine("// <auto-generated>");
		sb.AppendLine("//     This code was generated from a template.");
		sb.AppendLine("//");
		sb.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
		sb.AppendLine("//     the code is regenerated.");
		sb.AppendLine("// </auto-generated>");
		sb.AppendLine("//------------------------------------------------------------------------------");
		sb.AppendLine("");

		string extraNS = string.Join(string.Empty, extraUsings.Select((System.Object u) => "using " + u + ";" + Environment.NewLine).ToArray());
		if (!string.IsNullOrEmpty(extraNS))
			sb.AppendLine(extraNS);

		return sb.ToString();
	}

	public static string WriteHeader(params string[] extraUsings)
	{
		return WriteContextHeader(extraUsings);
	}

	public static string WriteBeginNamespace(string ns)
	{
		if (!string.IsNullOrEmpty(ns)) {
			return "namespace " + ns + Environment.NewLine + "{";
		}
		return string.Empty;
	}

	public static string WriteEndNamespace(string ns)
	{
		if (!string.IsNullOrEmpty(ns)) {
			return "}";
		}
		return string.Empty;
	}
	
	public static string GetPropertyValidationAttributes(MetadataTools ef, CodeGenerationTools code, EdmProperty prop)
	{
		string RetVal = "";
		string propType = code.Escape(prop.TypeUsage);

		if (!ef.IsNullable(prop)) {
			if (!(propType.ToLowerInvariant() == "string"))
				RetVal += "[Required(AllowEmptyStrings=false)]";
		}
		if (propType.ToLowerInvariant() == "string") {
			if (GetPropertyLength(code, prop) > -1) {
				if (!ef.IsNullable(prop)) {
					RetVal += "[Required(AllowEmptyStrings=false), StringLength(" + GetPropertyLength(code, prop).ToString() + ", MinimumLength=1)]";
				} else {
					RetVal += "[StringLength(" + GetPropertyLength(code, prop).ToString() + ")]";
				}
			}
		}
		return RetVal;
	}

	public static int GetPropertyLength(CodeGenerationTools code, EdmProperty prop)
	{
		int RetVal = -1;
		string propType = code.Escape(prop.TypeUsage);
		int MaxLength = 0;
		if (propType.ToLowerInvariant() == "string") {
			if (prop.TypeUsage.Facets["MaxLength"].Value != null) {
				if (!int.TryParse(prop.TypeUsage.Facets["MaxLength"].Value.ToString(), out MaxLength)) {
					// Max length of varchar(MAX) is 8000, nvarchar(MAX) is 4000
					MaxLength = 8000;
				}
			}
			RetVal = MaxLength;
		}
		if (RetVal == 0) { RetVal = -1; }
		return RetVal;
	}
	
	public static bool IsIdentity(EdmProperty prop, EntityType table) {
		return IsIdentity(prop, table.Name);
	}
	
	public static bool IsIdentity(EdmProperty prop, string tableName)
	{
		EdmProperty p = null;
		EntityType table = (from g in EntityGenerator.StoreItemCollection.GetItems<EntityType>() where g.Name == tableName select g).FirstOrDefault();
		
		if (table != null) {
			p = (from g in table.Properties where g.Name == prop.Name select g).FirstOrDefault();
			
			if (p != null) {
				MetadataProperty x = (from g in p.MetadataProperties where g.Name == "TypeUsage" select g).FirstOrDefault();
				if (x != null)
				{
					TypeUsage tu = (TypeUsage)x.Value;
					var ident = (from g in tu.Facets where g.Name == "StoreGeneratedPattern" && g.Value.ToString() == "Identity" select g).FirstOrDefault();
					if (ident != null)
					{
						return true;
					}
				}
			}
		}
		
        return false;
	}
}
#>
