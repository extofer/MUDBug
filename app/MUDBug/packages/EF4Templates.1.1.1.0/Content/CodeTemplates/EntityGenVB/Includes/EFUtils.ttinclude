<#@ template language="VB" hostspecific="True" debug="True" #>
<#+
' <copyright file="EFUtils.tt" company="CompDJ">
'  Copyright © 2010 CompDJ. All Rights Reserved.
' </copyright>

Public NotInheritable Class EfUtils
		
	Private Sub New()
	End Sub
	
	''' <summary>
	''' Adds the code coverage and contract exclusion attributes
	''' </summary>
	''' <returns></returns>
	Public Shared Function ReturnExcludeFromCodeCoverageString() as String
		If EntityGenerator.ExcludeFromCodeCoverage Then 
			Return "<System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()> _" + System.Environment.NewLine + _
			"<System.Diagnostics.Contracts.ContractVerification(false)> _" + System.Environment.NewLine
		End If
		return String.Empty
	End Function

	Public Shared Function IsUpperCase(ByVal inputString As String) As Boolean
		Return System.Text.RegularExpressions.Regex.IsMatch(inputString, "^[A-Z]+$")
	End Function
 
	
	''' <summary>
	''' Reformats the passed string from camelCase to ProperCase
	''' </summary>
	''' <param name="sIn">The string to reformat to proper case</param>
	''' <returns></returns>
	Public Shared Function ParseCamelToProper(ByVal sIn As String) As String
		If EfUtils.IsUpperCase(sIn) Then
			Return sIn
		End If

		If String.IsNullOrEmpty(sIn) Then Return ""
		
		Dim letters As Char() = sIn.ToCharArray
		Dim sOut As New System.Text.StringBuilder
		Dim index As Integer = 0
		If sIn.Contains("ID") Then
			sOut.Append(letters(0))
			sOut.Append(sIn.Substring(1, (sIn.Length - 1)))
		Else
			Dim c As Char
			For Each c In letters
				If (index = 0) Then
					sOut.Append(" ")
					sOut.Append(c.ToString.ToUpper)
				ElseIf Char.IsUpper(c) Then
					sOut.Append(" ")
					sOut.Append(c)
				Else
					sOut.Append(c)
				End If
				index += 1
			Next
		End If
		Return System.Text.RegularExpressions.Regex.Replace(sOut.ToString.Trim, "(?<=[A-Z]) (?=[A-Z])", String.Empty)
	End Function

	Public Shared Function WriteModelHeader(ByVal ParamArray extraUsings As String()) as String
		Dim sb as New System.Text.StringBuilder()
		
		sb.AppendLine("'------------------------------------------------------------------------------")
		sb.AppendLine("' <auto-generated>")
		sb.AppendLine("'     This code was generated from a template.")
		sb.AppendLine("'")
		sb.AppendLine("'     Changes to this file may cause incorrect behavior and will be lost if")
		sb.AppendLine("'     the code is regenerated.")
		sb.AppendLine("' </auto-generated>")
		sb.AppendLine("'------------------------------------------------------------------------------")
		sb.AppendLine("")
		sb.AppendLine("Option Compare Binary")
		sb.AppendLine("Option Infer On")
		sb.AppendLine("Option Explicit On")
		sb.AppendLine("Option Strict On")
		sb.AppendLine("")
		sb.AppendLine("Imports System")
		sb.AppendLine("Imports System.Collections.Generic")
		sb.AppendLine("Imports System.Collections.ObjectModel")
		sb.AppendLine("Imports System.Collections.Specialized")
		sb.AppendLine("Imports System.ComponentModel")
		sb.AppendLine("Imports System.Globalization")
		sb.AppendLine("Imports System.Runtime.Serialization")
		sb.AppendLine("Imports System.Runtime.CompilerServices")
		
		Dim extraNS as String = String.Join(String.Empty, extraUsings.Select(Function(u) "Imports " & u & Environment.NewLine).ToArray())
		If Not String.IsNullOrEmpty(extraNs) Then sb.AppendLine(extraNS)

		Return sb.ToString()
	End Function

	Public Shared Function WriteContextHeader(ByVal ParamArray extraUsings As String()) as String
		Dim sb as New System.Text.StringBuilder()
		
		sb.AppendLine("'------------------------------------------------------------------------------")
		sb.AppendLine("' <auto-generated>")
		sb.AppendLine("'     This code was generated from a template.")
		sb.AppendLine("'")
		sb.AppendLine("'     Changes to this file may cause incorrect behavior and will be lost if")
		sb.AppendLine("'     the code is regenerated.")
		sb.AppendLine("' </auto-generated>")
		sb.AppendLine("'------------------------------------------------------------------------------")
		sb.AppendLine("")
		sb.AppendLine("Option Compare Binary")
		sb.AppendLine("Option Infer On")
		sb.AppendLine("Option Explicit On")
		sb.AppendLine("Option Strict On")
		sb.AppendLine("")
		'sb.AppendLine("Imports System")
		'sb.AppendLine("Imports System.Collections.Generic")
		'sb.AppendLine("Imports System.ComponentModel")
		'sb.AppendLine("Imports System.Data.Common")
		'sb.AppendLine("Imports System.Data.EntityClient")
		'sb.AppendLine("Imports System.Data.Metadata.Edm")
		'sb.AppendLine("Imports System.Data.Objects.DataClasses")
		'sb.AppendLine("Imports System.Data.Objects")
		'sb.AppendLine("Imports System.Data")
		'sb.AppendLine("Imports System.Diagnostics")
		'sb.AppendLine("Imports System.Globalization")
		'sb.AppendLine("Imports System.Linq")
		'sb.AppendLine("Imports System.Runtime.CompilerServices")
		
		Dim extraNS as String = String.Join(String.Empty, extraUsings.Select(Function(u) "Imports " & u & Environment.NewLine).ToArray())
		If Not String.IsNullOrEmpty(extraNs) Then sb.AppendLine(extraNS)

		Return sb.ToString()
	End Function

	Public Shared Function WriteHeader(ByVal ParamArray extraUsings As String()) as String
		Dim sb as New System.Text.StringBuilder()
		
		sb.AppendLine("'------------------------------------------------------------------------------")
		sb.AppendLine("' <auto-generated>")
		sb.AppendLine("'     This code was generated from a template.")
		sb.AppendLine("'")
		sb.AppendLine("'     Changes to this file may cause incorrect behavior and will be lost if")
		sb.AppendLine("'     the code is regenerated.")
		sb.AppendLine("' </auto-generated>")
		sb.AppendLine("'------------------------------------------------------------------------------")
		sb.AppendLine("")
		sb.AppendLine("Option Compare Binary")
		sb.AppendLine("Option Infer On")
		sb.AppendLine("Option Explicit On")
		sb.AppendLine("Option Strict On")
		sb.AppendLine("")
		
		Dim extraNS as String = String.Join(String.Empty, extraUsings.Select(Function(u) "Imports " & u & Environment.NewLine).ToArray())
		If Not String.IsNullOrEmpty(extraNs) Then sb.AppendLine(extraNS)

		Return sb.ToString()
	End Function

	Public Shared Function WriteBeginNamespace(ByVal ns as string) as String
		If Not String.IsNullOrEmpty(ns) Then
			Return "Namespace " + ns 
		End If
		Return String.Empty
	End Function

	Public Shared Function WriteEndNamespace(ByVal ns as string) as String
		If Not String.IsNullOrEmpty(ns) Then
			Return "End Namespace"
		End If
		Return String.Empty
	End Function

	Public Shared Function GetPropertyValidationAttributes(ByVal ef as MetadataTools, ByVal code as CodeGenerationTools, ByVal prop as edmProperty) as String
		Dim RetVal as String = ""
		Dim propType as String = code.Escape(prop.TypeUsage)

		If Not ef.IsNullable(prop) Then
			If Not propType.ToLowerInvariant() = "string" Then RetVal += "<Required(AllowEmptyStrings:=False)>" 
		End If
        If propType.ToLowerInvariant() = "string" Then
			If GetPropertyLength(code, prop) > -1 Then
				If Not ef.IsNullable(prop) Then
					RetVal += "<Required(AllowEmptyStrings:=False), StringLength(" + GetPropertyLength(code, prop).ToString() + ", MinimumLength:=1)>" 
				Else
					RetVal += "<StringLength(" + GetPropertyLength(code, prop).ToString() + ")>"
				End If
			End If
		End If
		Return RetVal
	End Function

	Public Shared Function GetPropertyLength(ByRef code as CodeGenerationTools, ByVal prop as edmProperty) as Integer
		Dim RetVal as Integer = -1
		Dim propType as String = code.Escape(prop.TypeUsage)
        Dim MaxLength As Integer = 0
        If propType.ToLowerInvariant() = "string" Then
            If not prop.TypeUsage.Facets("MaxLength").Value is nothing Then
				If Not Integer.TryParse(prop.TypeUsage.Facets("MaxLength").Value.ToString(), MaxLength) Then
					MaxLength = Short.MaxValue '20000
				End If
			End If
			RetVal = MaxLength
        End If
		If (RetVal = 0) Then RetVal = -1
		Return RetVal
	End Function

	Public Shared Function IsIdentity(prop As EdmProperty, table As EntityType) As Boolean
		Return IsIdentity(prop, table.Name)
	End Function

	Public Shared Function IsIdentity(prop As EdmProperty, tableName As String) As Boolean
		Dim p As EdmProperty = Nothing
		Dim table As EntityType = (From g in EntityGenerator.StoreItemCollection.GetItems(Of EntityType)() Where g.Name = tableName select g).FirstOrDefault()

		If table IsNot Nothing Then
			p = ( from g in table.Properties Where g.Name = prop.Name select g).FirstOrDefault()

			If p IsNot Nothing Then
				Dim x As MetadataProperty = (from g in p.MetadataProperties Where g.Name = "TypeUsage" select g).FirstOrDefault()
				If x IsNot Nothing Then
					Dim tu As TypeUsage = DirectCast(x.Value, TypeUsage)
					Dim ident = (from g in tu.Facets Where g.Name = "StoreGeneratedPattern" AndAlso g.Value.ToString() = "Identity" select g).FirstOrDefault()
					If ident IsNot Nothing Then
						Return True
					End If
				End If
			End If
		End If

		Return False
	End Function

End Class 'EfUtils

#>
